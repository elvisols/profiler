version: "2.1"

networks:
  profiler-tier:
    driver: bridge

services:
  zookeeper:
    image: "wurstmeister/zookeeper"
    restart: always
    networks:
      - profiler-tier
    ports:
      - "2181:2181"
    healthcheck:
      test: exit 0

  kafka:
    image: "wurstmeister/kafka"
    restart: always
    networks:
      - profiler-tier
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "selections-topic:1:1,clicks-topic:1:1"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LOG_DIRS: /kafka/kafka-logs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka-logs:/kafka/kafka-logs
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: exit 0

  ksql:
    image: "confluentinc/cp-ksql-server:5.2.2"
    restart: always
    networks:
      - profiler-tier
    ports:
      - "8088:8088"
    environment:
      - KSQL_BOOTSTRAP_SERVERS=kafka:9092
      - KSQL_LISTENERS=http://0.0.0.0:8088/
    # Connect the KSQL CLI to the server.
    # docker run -it --net profiler_profiler-tier confluentinc/cp-ksql-cli http://ksql:8088
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test: exit 0

  kafdrop:
    image: "obsidiandynamics/kafdrop:3.13.0"
    restart: always
    networks:
      - profiler-tier
    ports:
      - "9000:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092

  elasticsearch:
    image: "elasticsearch:6.7.1"
    restart: always
    networks:
      - profiler-tier
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - DISCOVERY_TYPE=single-node
    volumes:
      - "./es:/usr/share/elasticsearch/data"
    healthcheck:
      test: exit 0

  kibana:
    image: "kibana:6.7.1"
    restart: always
    networks:
      - profiler-tier
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: exit 0
  profiler:
    image: "elvisols/profiler"
    restart: always
    networks:
      - profiler-tier
    ports:
      - "8999:8999"
    environment:
      - KAFKA_SERVER=kafka
      #       - KSQL_REST_API_ENDPOINT_KSQL=http://ksql:8088/ksql
      #       - KSQL_REST_API_ENDPOINT_QUERY=http://ksql:8088/query
      #       - KSQL_REST_API_ENDPOINT_INFO=http://ksql:8088/info
      #       - KSQL_REST_API_ENDPOINT_STATUS=http://ksql:8088/status
      - ELASTICSEARCH_HOST=elasticsearch
      - SPRING_DATA_ELASTICSEARCH_CLUSTER-NODES=elasticsearch:9300
    volumes:
      - "./inputsource:/inputsource"
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: exit 0
